name: Build and Push Docker Image

on:
  push:
    branches:
      - develop  # develop 브랜치에 push할 때 트리거됨

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SERVICE_NAME: trit-userservice
      DEPLOY_ENV: dev

    steps:
      # 1. GitHub 리포지토리 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Gradle 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. gradle 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Gradle 빌드 테스트 x
      - name: Build with Gradle
        run: ./gradlew bootJar -x test

      # 5. Docker 설치
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 6. NCP Container Registry 로그인을 위한 인증
      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.NCP_STORAGE_ACCESS_KEY }}
          password: ${{ secrets.NCP_STORAGE_SECRET_KEY }}
          registry: ${{ secrets.CONTAINER_REGISTRY }} # production 배포에서는 secrets 값을 수정해서 사용

      # 6-1. 이미지 태그 날짜 + sha 생성
      - name: Set environment variables for image tag
        run: |
          IMAGE_TAG=$(date +%Y%m%d)-${GITHUB_SHA:0:7}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 7. Docker 이미지 빌드 및 태그 (NCP용)
      - name: Build and tag Docker image
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
        run: |
          docker build \
          --build-arg NCP_STORAGE_ACCESS_KEY="${{ secrets.NCP_STORAGE_ACCESS_KEY }}" \
          --build-arg NCP_STORAGE_SECRET_KEY="${{ secrets.NCP_STORAGE_SECRET_KEY }}" \
          --build-arg OMNI_CP_CODE="${{ secrets.OMNI_CP_CODE }}" \
          --build-arg OMNI_SITE_KEY="${{ secrets.OMNI_SITE_KEY }}" \
          --build-arg DB_USERNAME="${{ secrets.DB_USERNAME }}" \
          --build-arg DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
          --build-arg DB_PRIMARY_URL="${{ secrets.DB_PRIMARY_URL }}" \
          --build-arg PASSWORD_RESET_URL="${{ secrets.PASSWORD_RESET_URL }}" \
          --build-arg EDUCATION_SERVICE_URL="${{ secrets.EDUCATION_SERVICE_URL }}" \
          --build-arg REDIS_HOST="${{ secrets.REDIS_HOST }}" \
          -t ${{ secrets.CONTAINER_REGISTRY }}/$SERVICE_NAME:$IMAGE_TAG . 

      # 8. NCP Container Registry 로 푸시 추후 NCP만 사용 예정
      - name: Push Docker image to NCP Container Registry
        env:
          SERVICE_NAME: trit-userservice
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker push ${{ secrets.CONTAINER_REGISTRY }}/$SERVICE_NAME:$IMAGE_TAG

       # 9. ssh-action을 이용한 외부 서버 접속 및 도커 이미지 교체
       # 테스트용 production에서는 사용하지 않음.
       # 테스트 서버 Docker NCP Container Registry 접속
#      - name: SSH Deploy to Synology NAS
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_IP }}
#          username: ${{ secrets.SSH_USER }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: ${{ secrets.SERVER_PORT }}
#          script: |
#            IMAGE_TAG=${{ env.IMAGE_TAG }}
#            SERVICE_NAME=${{ env.SERVICE_NAME }}
#            REGISTRY=${{ secrets.CONTAINER_REGISTRY }}
#
#            # 기존 컨테이너 중지 및 삭제
#            docker stop trit-userservice || true
#            docker rm trit-userservice || true
#
#            # Docker 이미지 pull
#            docker pull $REGISTRY/$SERVICE_NAME:$IMAGE_TAG
#
#            # 새로운 컨테이너 실행
#            docker run -d --name trit-userservice \
#              -p 8080:8080 \
#              -e "spring.datasource.url=${{ secrets.DB_URL }}" \
#              -e "spring.datasource.username=${{ secrets.DB_USERNAME }}" \
#              -e "spring.datasource.password=${{ secrets.DB_PASSWORD }}" \
#              -e "password-reset.url=http://www.trit.me/password/reset" \
#              -e "education-service.url=http://trit-educationservice:8081" \
#              -e "spring.data.redis.host=redis" \
#              --network trit-service \
#              $REGISTRY/$SERVICE_NAME:$IMAGE_TAG

      # 10. Slack Docker image push 알림 전송
      - name: Send Slack Notification
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"✅ Docker image $SERVICE_NAME:$IMAGE_TAG has been successfully pushed to Docker Hub and deployed to the server.\"}" $SLACK_WEBHOOK_URL

      - name: Send Slack Notification on Failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"❌ Docker image push or deployment failed for $SERVICE_NAME:$IMAGE_TAG.\"}" $SLACK_WEBHOOK_URL

      # 11. 배포 저장소 clone
      - name: Clone deploy reposiory
        uses: actions/checkout@v3
        with:
          repository: OCG-Develop/deploy
          ref: 'main'
          token: ${{ secrets.REPO_ACCESS_TOKEN }} # PAT 토큰 발급 후 사용. 권한은 repo 권한.

      # 12. Change image tag
      - name: Change image tag for istio
        uses: mikefarah/yq@master
        if: inputs.change_image_yq_command == ''
        with:
          cmd: yq e --inplace '.image.tag = env(IMAGE_TAG)' services/user/values-alpha.yaml # image 태그 명은 devops 확인 후 적용

      # 13. Commit changes to the deploy repo
      - name: Commit changes in deploy repo
        run: |
          git config user.name ${{ secrets.GIT_USER }}
          git config user.email ${{ secrets.GIT_USER_EMAIL }}
          git add services/user/values-alpha.yaml
          git commit -m "deploy: userservice"

      # 14. Create Pull Request in deploy repo
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}  # 또는 deploy repo에서 생성된 Personal Access Token 사용
          repository: OCG-Develop/deploy  # deploy repo의 repository 명
          title: "Deploy: Sync from source repo"
          labels: |
            automerge
          body: "This PR contains the latest changes from the source repo."
          head: deploy-branch-name  # PR을 생성할 브랜치
          base: main  # PR을 머지할 대상 브랜치

      # 15. Slack deploy 알림 전송
      - name: Send Slack Notification
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"✅ OCG-Develop/deploy has been successfully merge.\"}" $SLACK_WEBHOOK_URL

      - name: Send Slack Notification on Failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"❌ OCG-Develop/deploy deployment failed.\"}" $SLACK_WEBHOOK_URL
