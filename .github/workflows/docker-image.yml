name: Build and Push Concert Mania Docker Image

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SERVICE_NAME: concert-mania
      IMAGE_VERSION: 1.1.0

    steps:
      # 1. GitHub 리포지토리 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      # 3. gradle 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Gradle 빌드 및 테스트
      - name: Build with Gradle
        run: ./gradlew clean build

      # 5. Docker 설치
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 6. GitHub Container Registry 로그인
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7. 이미지 태그 생성 (날짜 + SHA)
      - name: Set environment variables for image tag
        run: |
          IMAGE_TAG=$(date +%Y%m%d)-${GITHUB_SHA:0:7}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 8. Docker 이미지 빌드 및 태그
      - name: Build and tag Docker image
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
        run: |
          docker build \
          --build-arg DB_USERNAME="${{ secrets.DB_USERNAME }}" \
          --build-arg DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
          --build-arg DB_PRIMARY_URL="${{ secrets.DB_PRIMARY_URL }}" \
          --build-arg DB_USER_URL="${{ secrets.DB_USER_URL }}" \
          --build-arg REDIS_HOST="${{ secrets.REDIS_HOST }}" \
          --build-arg RABBITMQ_HOST="${{ secrets.RABBITMQ_HOST }}" \
          --build-arg RABBITMQ_PORT="${{ secrets.RABBITMQ_PORT }}" \
          --build-arg RABBITMQ_USERNAME="${{ secrets.RABBITMQ_USERNAME }}" \
          --build-arg RABBITMQ_PASSWORD="${{ secrets.RABBITMQ_PASSWORD }}" \
          --build-arg AES_KEY="${{ secrets.AES_KEY }}" \
          --build-arg SECURITY_TOKEN_HMAC_KEY="${{ secrets.SECURITY_TOKEN_HMAC_KEY }}" \
          --build-arg EXTENDS_JWT_SECRET_KEY="${{ secrets.EXTENDS_JWT_SECRET_KEY }}" \
          --build-arg JWT_ACCESS_TOKEN_VALIDITY="${{ secrets.JWT_ACCESS_TOKEN_VALIDITY }}" \
          --build-arg JWT_REFRESH_TOKEN_VALIDITY="${{ secrets.JWT_REFRESH_TOKEN_VALIDITY }}" \
          --build-arg JWT_REFRESH_TOKEN_COOKIE_NAME="${{ secrets.JWT_REFRESH_TOKEN_COOKIE_NAME }}" \
          --build-arg JWT_ONETIME_TOKEN_VALIDITY="${{ secrets.JWT_ONETIME_TOKEN_VALIDITY }}" \
          --build-arg MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE="${{ secrets.MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE }}" \
          --build-arg MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS="${{ secrets.MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS }}" \
          --build-arg MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED="${{ secrets.MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED }}" \
          -t ghcr.io/${{ github.repository_owner }}/$SERVICE_NAME:$IMAGE_TAG \
          -t ghcr.io/${{ github.repository_owner }}/$SERVICE_NAME:${{ env.IMAGE_VERSION }} \
          -t ghcr.io/${{ github.repository_owner }}/$SERVICE_NAME:latest .

      # 9. GitHub Container Registry로 이미지 푸시
      - name: Push Docker image to GitHub Container Registry
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/$SERVICE_NAME:$IMAGE_TAG
          docker push ghcr.io/${{ github.repository_owner }}/$SERVICE_NAME:${{ env.IMAGE_VERSION }}
          docker push ghcr.io/${{ github.repository_owner }}/$SERVICE_NAME:latest

      # 10. 배포 알림 (Slack 설정이 있는 경우)
      - name: Send Slack Notification
        if: success() && secrets.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"✅ Concert Mania Docker image has been successfully built and pushed to GitHub Container Registry. \nImage: ghcr.io/${{ github.repository_owner }}/$SERVICE_NAME:$IMAGE_TAG\"}" $SLACK_WEBHOOK_URL

      - name: Send Slack Notification on Failure
        if: failure() && secrets.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"❌ Concert Mania Docker image build or push failed.\"}" $SLACK_WEBHOOK_URL
